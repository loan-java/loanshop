package io.dkgj.common.utils;



import com.mirana.frame.constants.SysConstants;
import com.mirana.frame.utils.RandomUtils;
import com.mirana.frame.utils.SysPropUtils;
import com.mirana.frame.utils.encrypt.enumtype.AESMode;
import com.mirana.frame.utils.encrypt.enumtype.Algorithm;
import com.mirana.frame.utils.encrypt.enumtype.Padding;
import com.sun.javafx.scene.traversal.Algorithm;
import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.Charset;
import java.security.Security;

/**
 * AES加解密工具类
 */
public class AESUtils {
    // u8 charset
    protected static final Charset CHARSET_U8     = Charset.forName("utf-8");
    // u8 string
    protected static final String  CHARSET_U8_STR = "utf-8";
    // 换行
    protected static final String  NEXTLINE       = "1";

    /**
     * AES加密
     *
     * @param algorithm 加密算法
     * @param aesMode   加密模式
     * @param padding   补码方式
     * @param serectKey 秘钥
     * @param ivKey     向量偏移量
     * @param content   要加密的文本
     * @return
     */
    public static String encrypt (Algorithm algorithm, AESMode aesMode, Padding padding, String serectKey, String ivKey, String content) {
        // 加密模式
        String encryptMode = algorithm.getValue() + "/" + aesMode.getValue() + "/" + padding.getValue();

        StringBuffer encryptStr = new StringBuffer();
        encryptStr.append("--------- [ Encrypt ] 加密算法：" + encryptMode + " ----------");
        encryptStr.append(NEXTLINE);
        encryptStr.append("--------- [ Encrypt ] 算法：" + algorithm.getValue() + "， 加密模式：" + aesMode.getValue() + "，补码： " + padding.getValue() + " ----------");
        encryptStr.append(NEXTLINE);
        encryptStr.append("--------- [ Encrypt ] 秘钥：" + serectKey + "， 向量偏移量：" + ivKey + " ----------");
        encryptStr.append(NEXTLINE);
        encryptStr.append("--------- [ Encrypt ] 加密前数据：" + content + " ----------");
        encryptStr.append(NEXTLINE);

        String encyptedContent = null;
        try {
            // 1.根据指定算法AES自成密码器
            String encyptType = encryptMode;
            // 2.1 如果是NOPADDING，加密的字符bytes长度必须是16的倍数；
            // 2.2 Java目前不支持ZEROPADDING
            // 2.3 如果是PKCS7Padding，需要调用BouncyCastleProvider让java支持PKCS7Padding
            switch (padding) {
                case NO_PADDING:
                    int len = content.getBytes("UTF-8").length;
                    int m = len % 16;
                    if (m != 0) {
                        for (int i = 0; i < 16 - m; i++) {
                            content += " ";
                        }
                    }
                    break;
                case ZERO_PADDING:
                    throw new IllegalArgumentException("抱歉，Java目前不支持" + Padding.ZERO_PADDING.getValue());
                case PKCS7_PADDING:
                    Security.addProvider(new BouncyCastleProvider());
                    break;
                default:
                    break;
            }
            SecretKeySpec keyspec = new SecretKeySpec(serectKey.getBytes(CHARSET_U8), algorithm.getValue());
            // 3.初始化密码器，第一个参数为加密(Encrypt_mode)或者解密解密(Decrypt_mode)操作，第二个参数为使用的KEY，第三个参数为向量iv
            Cipher cipher = Cipher.getInstance(encyptType);
            // 4.ECB模式不需要使用IV，其他的模式都可以添加向量iv（不是必需）
            switch (aesMode) {
                case ECB:
                    cipher.init(Cipher.ENCRYPT_MODE, keyspec);
                    break;
                default:
                    IvParameterSpec iv = new IvParameterSpec(ivKey.getBytes(CHARSET_U8));
                    cipher.init(Cipher.ENCRYPT_MODE, keyspec, iv);
                    break;
            }
            // 5.获取加密内容的字节数组(这里要设置为utf-8)不然内容中如果有中文和英文混合中文就会解密为乱码
            byte[] byte_encode = content.getBytes(CHARSET_U8_STR);
            // 6.根据密码器的初始化方式--加密：将数据加密
            byte_encode = cipher.doFinal(byte_encode);
            // 7.将加密后的数据转换为字符串
            encyptedContent = new String(Base64.encodeBase64(byte_encode));

            encryptStr.append("--------- [ Encrypt ] 加密后数据：" + encyptedContent + " ----------");
            encryptStr.append(NEXTLINE);

            encryptStr.append("--------- [ Encrypt success ] 加密数据成功 ----------");
            encryptStr.append(NEXTLINE);

        } catch (Exception e) {
            encryptStr.append("--------- [ Encrypt failed ] 加密数据失败 ----------");
            encryptStr.append(NEXTLINE);
            e.printStackTrace();
        }

        System.out.println(encryptStr);

        // 7.将字符串返回，错误返回null
        return encyptedContent;
    }

    public static String decrypt (Algorithm algorithm, AESMode aesMode, Padding padding, String serectKey, String ivKey, String content) {
        // 加密模式
        String encryptMode = algorithm.getValue() + "/" + aesMode.getValue() + "/" + padding.getValue();

        StringBuffer decryptLog = new StringBuffer();
        decryptLog.append("--------- [ Decrypt ] 加密算法：" + encryptMode + " ----------");
        decryptLog.append(NEXTLINE);
        decryptLog.append("--------- [ Decrypt ] 算法：" + algorithm.getValue() + "， 加密模式：" + aesMode.getValue() + "，补码： " + padding.getValue() + " ----------");
        decryptLog.append(NEXTLINE);
        decryptLog.append("--------- [ Decrypt ] 秘钥：" + serectKey + "，向量 偏移量：" + ivKey + " ----------");
        decryptLog.append(NEXTLINE);
        decryptLog.append("--------- [ Decrypt ] 解密前数据：" + content + " ----------");
        decryptLog.append(NEXTLINE);

        String decryptContent = null;
        try {
            // 1.根据指定算法AES自成密码器
            String encyptType = encryptMode;
            // 2.1 如果是NOPADDING，加密的字符bytes长度必须是16的倍数；
            // 2.2 Java目前不支持ZEROPADDING
            // 2.3 如果是PKCS7Padding，需要调用BouncyCastleProvider让java支持PKCS7Padding
            switch (padding) {
                case NO_PADDING:
                    int len = content.getBytes("UTF-8").length;
                    int m = len % 16;
                    if (m != 0) {
                        for (int i = 0; i < 16 - m; i++) {
                            content += " ";
                        }
                    }
                    break;
                case ZERO_PADDING:
                    throw new IllegalArgumentException("抱歉，Java目前不支持" + Padding.ZERO_PADDING.getValue());
                case PKCS7_PADDING:
                    Security.addProvider(new BouncyCastleProvider());
                    break;
                default:
                    break;
            }
            SecretKeySpec keyspec = new SecretKeySpec(serectKey.getBytes(CHARSET_U8), algorithm.getValue());
            // 3.初始化密码器，第一个参数为加密(Encrypt_mode)或者解密解密(Decrypt_mode)操作，第二个参数为使用的KEY，第三个参数为向量iv
            Cipher cipher = Cipher.getInstance(encyptType);
            // 4.ECB模式不需要使用IV，其他的模式都可以添加向量iv（不是必需）
            switch (aesMode) {
                case ECB:
                    cipher.init(Cipher.DECRYPT_MODE, keyspec);
                    break;
                default:
                    IvParameterSpec iv = new IvParameterSpec(ivKey.getBytes(CHARSET_U8));
                    cipher.init(Cipher.DECRYPT_MODE, keyspec, iv);
                    break;
            }
            // 5.将加密并编码后的内容解码成字节数组
            byte[] byte_content = Base64.decodeBase64(content);
            // 6.AES解密
            byte_content = cipher.doFinal(byte_content);
            // 7.使用u8生成解密字符串
            decryptContent = new String(byte_content, CHARSET_U8_STR);

            decryptLog.append("--------- [ Decrypt ] 解密后数据：" + decryptContent + " ----------");
            decryptLog.append(NEXTLINE);

            decryptLog.append("--------- [ Decrypt success ] 解密数据成功 ----------");
            decryptLog.append(NEXTLINE);

        } catch (Exception e) {
            decryptLog.append("--------- [ Decrypt failed ] 解密数据失败 ----------");
            decryptLog.append(NEXTLINE);
            e.printStackTrace();
        }

        System.out.println(decryptLog);

        // 7.将字符串返回，错误返回null
        return decryptContent;
    }

    /**
     * 测试AES加密算法
     *
     * @param algorithm       算法
     * @param aesMode         加密模式
     * @param padding         补码
     * @param serectKeyLength 秘钥key长度
     * @param ivKeyLength     向量iv长度*/
    private static void testAESEncrypt (Algorithm algorithm, AESMode aesMode, Padding padding, int serectKeyLength, int ivKeyLength) {
        String originalStr = "这是一个没有固定长度的测试的字符串";

        String serectKey = RandomUtils.getString(serectKeyLength);
        String ivKey = RandomUtils.getString(ivKeyLength);

        String encryptContent = encrypt(algorithm, aesMode, padding, serectKey, ivKey, originalStr);
        String decryptContent = decrypt(algorithm, aesMode, padding, serectKey, ivKey, encryptContent);
        System.out.println("原字符串: " + originalStr);
        System.out.println("加密后字符串: " + encryptContent);
        System.out.println("解密后字符串: " + decryptContent);
        System.out.println("");
    }

    public static void main (String[] args) {
        // // AES/CBC/*
        //
        // // AES/CBC/NO_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.CBC, Padding.NO_PADDING, 16, 16);
        // // AES/CBC/PKCS5Padding
        // testAESEncrypt(Algorithm.AES, AESMode.CBC, Padding.PKCS5_PADDING, 16, 16);
        // // AES/CBC/PKCS7Padding
        // testAESEncrypt(Algorithm.AES, AESMode.CBC, Padding.PKCS7_PADDING, 16, 16);
        // // AES/CBC/ISO10126Padding
        // testAESEncrypt(Algorithm.AES, AESMode.CBC, Padding.ISO10126Padding, 16, 16);

        // ********************************************************************

        // // AES/ECB/*
        //
        // // AES/ECB/NO_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.ECB, Padding.NO_PADDING, 16, 16);
        // // AES/ECB/PKCS5_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.ECB, Padding.PKCS5_PADDING, 16, 16);
        // // AES/ECB/PKCS7_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.ECB, Padding.PKCS7_PADDING, 16, 16);
        // // AES/ECB/ISO10126Padding
        // testAESEncrypt(Algorithm.AES, AESMode.ECB, Padding.ISO10126Padding, 16, 16);

        // ********************************************************************

        // // AES/CFB/*
        //
        // // AES/CFB/NO_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.CFB, Padding.NO_PADDING, 16, 16);
        // // AES/CFB/PKCS5_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.CFB, Padding.PKCS5_PADDING, 16, 16);
        // // AES/CFB/PKCS7_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.CFB, Padding.PKCS7_PADDING, 16, 16);
        // // AES/CFB/ISO10126Padding
        // testAESEncrypt(Algorithm.AES, AESMode.CFB, Padding.ISO10126Padding, 16, 16);

        // ********************************************************************

        // // AES/CTR/*
        //
        // // AES/CTR/NO_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.CTR, Padding.NO_PADDING, 16, 16);
        // // AES/CTR/PKCS5_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.CTR, Padding.PKCS5_PADDING, 16, 16);
        // // AES/CTR/PKCS7_PADDING
        // testAESEncrypt(Algorithm.AES, AESMode.CTR, Padding.PKCS7_PADDING, 16, 16);
        // // AES/CTR/ISO10126Padding
        // testAESEncrypt(Algorithm.AES, AESMode.CTR, Padding.ISO10126Padding, 16, 16);

        // ********************************************************************

        // AES/OFB/*
        //
        // AES/OFB/NO_PADDING
        testAESEncrypt(Algorithm.AES, AESMode.OFB, Padding.NO_PADDING, 16, 16);
        // AES/OFB/PKCS5_PADDING
        testAESEncrypt(Algorithm.AES, AESMode.OFB, Padding.PKCS5_PADDING, 16, 16);
        // AES/OFB/PKCS7_PADDING
        testAESEncrypt(Algorithm.AES, AESMode.OFB, Padding.PKCS7_PADDING, 16, 16);
        // AES/OFB/ISO10126Padding
        testAESEncrypt(Algorithm.AES, AESMode.OFB, Padding.ISO10126Padding, 16, 16);

    }

}
